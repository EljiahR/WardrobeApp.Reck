@page "/wardrobe"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject HttpClient Http

<h3>Wardrobe</h3>
<EditForm FormName="AddNewClothingForm" Model="NewClothing" OnValidSubmit="HandleValidSubmit">
	<InputText id="category" @bind-Value="@NewClothing.Category" />
	<InputText id="description" @bind-Value="@NewClothing.Description" />
	<InputFile OnChange="HandleFileInput" />
	<button type="submit">Submit</button>
</EditForm>

@if(isLoading)
{
	<p>Wardrobe is loading...</p>
} 
else if (wardrobe.Count > 0)
{
	<ul>
		@foreach (var item in wardrobe)
		{
			<li>
				<p>@item.Id: @item.Category</p>
				<p>@item.Description</p>
				@if (item.ImageData != null)
				{
					<img style="width: 50px; height 50px;" src="data:@item.ImageType;base64,@(Convert.ToBase64String(item.ImageData))" />
				}
				else
				{
					<p>No image</p>
				}
				<div>
					<button>Edit</button>
					<button>Delete</button>
				</div>
			</li>
		}
	</ul>
} else
{
	<p>Wardrobe is empty :(</p>
}

@code {
	[SupplyParameterFromForm(FormName = "AddNewClothingForm")]
	private ClothingModel? NewClothing { get; set; }

	protected override void OnInitialized()
	{
		NewClothing ??= new();
	}

	private List<ClothingModel> wardrobe = new();
	private string? newCategory;
	private bool isLoading = true;
	private IBrowserFile? uploadedPicture;



	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		if (firstRender && Navigation.Uri.Contains("http"))
		{
			await LoadWardrobe();
		}
	}


	private async Task LoadWardrobe()
	{
		try
		{
			isLoading = true;
			//wardrobe = await WardrobeService.GetWardrobeAsync();
			wardrobe = await Http.GetFromJsonAsync<List<ClothingModel>>("api/Wardrobe") ?? new List<ClothingModel>();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
		finally
		{
			isLoading = false;
			StateHasChanged(); // Why is this necessary
		}
	}

	private async Task AddClothing()
	{
		try
		{
			var response = await Http.PostAsJsonAsync<ClothingModel>("api/Wardrobe", NewClothing);
			var postedClothing = await response.Content.ReadFromJsonAsync<ClothingModel>() ?? new ClothingModel();
			wardrobe.Add(postedClothing);
			NewClothing = new();
		} catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

	}

	private async Task HandleValidSubmit()
	{
		await AddClothing();
	}

	private async Task HandleFileInput(InputFileChangeEventArgs e)
	{
		var uploadedFile = e.File;
		var buffer = new byte[uploadedFile.Size];
		await uploadedFile.OpenReadStream().ReadAsync(buffer);
		NewClothing.ImageData = buffer;
		NewClothing.ImageType = uploadedFile.ContentType;
	}
}
