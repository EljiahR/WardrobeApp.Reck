@page "/wardrobe"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@inject HttpClient Http

<h3>Wardrobe</h3>
<EditForm FormName="AddNewClothingForm" Model="NewClothing" OnValidSubmit="HandleValidSubmit">
	<DataAnnotationsValidator />

	<ValidationSummary />
	<label for="category">Category</label>
	<InputText id="category" @bind-Value="@NewClothing!.Category" placeholder="Shirt (Required)" />
	<label for="description"></label>
	<InputText id="description" @bind-Value="@NewClothing.Description" placeholder="A yellow shirt..." />
	<InputFile OnChange=@((e) => HandleFileInput(e, NewClothing)) />
	<button disabled="@isLoading" type="submit">Submit</button>
</EditForm>

@if(isLoading)
{
	<p>Wardrobe is loading...</p>
} 
else if (wardrobe.Count > 0)
{
	<table class="table">
		<thead>
			<tr>
				<td>Id</td>
				<td>Category</td>
				<td>Description</td>
				<td>Image</td>
				<td>Edit/Delete</td>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in wardrobe)
				if (displayEdit[item.Id])
				{
					<tr>
						<td>@item.Id</td>
						<td colspan="3">
							<EditForm FormName="Update-item.Id" Model="@editModels[item.Id]" OnValidSubmit=@(() => HandleValidUpdate(editModels[item.Id]))>
								<DataAnnotationsValidator />

								<ValidationSummary />
								<InputText id="categoryEdit" @bind-Value="@editModels[item.Id].Category" placeholder="@editModels[item.Id].Category" />
								<InputText id="descriptionEdit" @bind-Value="@editModels[item.Id].Description" placeholder="@editModels[item.Id].Description" />
								<InputFile OnChange=@((e) => HandleFileInput(e, editModels[item.Id])) />
								<button disabled="@isLoading" type="submit">Update</button>
							</EditForm>
						</td>
						<td>
							<button @onclick=@(() => ToggleClothingEdit(item.Id))>Cancel</button>
						</td>
					</tr>
				} else
				{
					<tr>
						<td>@item.Id</td>
						<td>@item.Category</td>
						<td>@item.Description</td>
						<td>
							@if (item.ImageData != null)
							{
								<img style="width: 100px; height: 100px;" src="data:@item.ImageType;base64,@(Convert.ToBase64String(item.ImageData))" />
							}
							else
							{
								<p>No image</p>
							}
						</td>
						<td>
							<button @onclick=@(() => ToggleClothingEdit(item.Id))>Edit</button>
							<button @onclick=@(() => RemoveClothing(item))>Delete</button>
						</td>
					</tr>
				}
			
		</tbody>
		
	</table>
} else
{
	<p>Wardrobe is empty :(</p>
}

@code {
	[SupplyParameterFromForm(FormName = "AddNewClothingForm")]
	private ClothingModel? NewClothing { get; set; }

	protected override void OnInitialized()
	{
		NewClothing ??= new();
	}

	private List<ClothingModel> wardrobe = new();
	Dictionary<int, bool> displayEdit = new();
	Dictionary<int, ClothingModel> editModels = new();
	private string? newCategory;
	private bool isLoading = true;
	private IBrowserFile? uploadedPicture;
	private IBrowserFile? uploadedPictureUpdate;



	protected override async Task OnAfterRenderAsync(bool firstRender)
	{

		if (firstRender && Navigation.Uri.Contains("http"))
		{
			await LoadWardrobe();
		}
	}


	private async Task LoadWardrobe()
	{
		try
		{
			isLoading = true;
			//wardrobe = await WardrobeService.GetWardrobeAsync();
			wardrobe = await Http.GetFromJsonAsync<List<ClothingModel>>("api/Wardrobe") ?? new List<ClothingModel>();
			foreach (var item in wardrobe)
			{
				displayEdit[item.Id] = false;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
		finally
		{
			isLoading = false;
			StateHasChanged(); // Why is this necessary
		}
	}

	private async Task AddClothing()
	{
		try
		{
			var response = await Http.PostAsJsonAsync<ClothingModel>("api/Wardrobe", NewClothing!);
			var postedClothing = await response.Content.ReadFromJsonAsync<ClothingModel>() ?? new ClothingModel();
			wardrobe.Add(postedClothing);
			displayEdit[postedClothing.Id] = false;
			NewClothing = new();
		} catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

	}

	private void ToggleClothingEdit(int id)
	{
		displayEdit[id] = !displayEdit[id];
		if(displayEdit[id])
		{
			var originalModel = wardrobe.First(item => item.Id == id);
			editModels[id] = new ClothingModel { 
				Id = id,
				Category = originalModel.Category,
				Description = originalModel.Description,
				ImageData = originalModel.ImageData,
				ImageType = originalModel.ImageType
				};
		}
	}

	private async Task RemoveClothing(ClothingModel clothingToDelete)
	{
		try
		{
			await Http.PostAsJsonAsync<ClothingModel>("api/Wardrobe/Delete", clothingToDelete);
			wardrobe.Remove(clothingToDelete);
			displayEdit.Remove(clothingToDelete.Id);
			if (editModels.ContainsKey(clothingToDelete.Id)) editModels.Remove(clothingToDelete.Id);

		} catch(Exception ex)
		{
			Console.WriteLine(ex.Message);
		}
	}

	private async Task HandleValidSubmit()
	{
		await AddClothing();
	}

	private async Task HandleValidUpdate(ClothingModel updatedModel)
	{
		await UpdateClothing(updatedModel);
	}

	private async Task UpdateClothing(ClothingModel updatedModel)
	{
		try
		{
			var response = await Http.PostAsJsonAsync<ClothingModel>("api/Wardrobe/Update", updatedModel);
			var postedClothing = await response.Content.ReadFromJsonAsync<ClothingModel>() ?? new ClothingModel();
			var originalModel = wardrobe.First(item => updatedModel.Id == item.Id);
			int index = wardrobe.IndexOf(originalModel);
			wardrobe[index] = postedClothing; 
			displayEdit[postedClothing.Id] = false;
			editModels[postedClothing.Id] = new();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
		}

	}

	private async Task HandleFileInput(InputFileChangeEventArgs e, ClothingModel clothingModel)
	{
		var uploadedFile = e.File;
		var buffer = new byte[uploadedFile.Size];
		await uploadedFile.OpenReadStream().ReadAsync(buffer);
		clothingModel.ImageData = buffer;
		clothingModel.ImageType = uploadedFile.ContentType;
	}
}
